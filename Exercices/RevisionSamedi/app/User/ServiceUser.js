"use strict";
var core_1 = require("@angular/core");
var Sqlite = require("nativescript-sqlite");
var ServiceUser = (function () {
    function ServiceUser() {
        var _this = this;
        (new Sqlite("my.db")).then(function (db) {
            db.execSQL("CREATE TABLE IF NOT EXISTS user (id INTEGER PRIMARY KEY AUTOINCREMENT, email TEXT, password TEXT)").then(function (id) {
                //  page.bindingContext = createViewModel(db);
                _this.database = db;
                //this.insertProducts();
                _this.getAll();
            }, function (error) {
                console.log("CREATE TABLE ERROR", error);
            });
        }, function (error) {
            console.log("OPEN DB ERROR", error);
        });
    }
    ServiceUser.prototype.getUsers = function () {
        return this.users;
    };
    ServiceUser.prototype.getUser = function (id) {
        return this.users.filter(function (pr) { return pr.id == id; })[0];
    };
    ServiceUser.prototype.FindUser = function (email, password) {
        return this.users.filter(function (pr) { return pr.email == email; })[0];
    };
    ServiceUser.prototype.getAll = function () {
        var _this = this;
        this.database.all("SELECT * FROM user").then(function (rows) {
            for (var row in rows) {
                // console.log("RESULT", rows[row]);
                _this.users.push({
                    id: rows[row][0],
                    email: rows[row][1],
                    password: rows[row][2]
                });
            }
        }, function (error) {
            console.log("SELECT ERROR", error);
        });
    };
    ServiceUser.prototype.insertUser = function (pr) {
        var _this = this;
        this.database.execSQL("INSERT INTO user (email, password) VALUES (?, ?)", [pr.email, pr.password]).then(function (id) {
            console.log("INSERT RESULT", id);
            _this.getAll();
        }, function (error) {
            console.log("INSERT ERROR", error);
        });
    };
    ServiceUser = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], ServiceUser);
    return ServiceUser;
}());
exports.ServiceUser = ServiceUser;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VydmljZVVzZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJTZXJ2aWNlVXNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEscUJBQTJCLGVBQWUsQ0FBQyxDQUFBO0FBRzNDLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO0FBRzNDO0lBS0c7UUFMSCxpQkFzREM7UUFoREksQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLEVBQUU7WUFDMUIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxtR0FBbUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLEVBQUU7Z0JBQ3JILDhDQUE4QztnQkFDOUMsS0FBSSxDQUFDLFFBQVEsR0FBQyxFQUFFLENBQUM7Z0JBQ2pCLHdCQUF3QjtnQkFDeEIsS0FBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2hCLENBQUMsRUFBRSxVQUFBLEtBQUs7Z0JBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUM3QyxDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsRUFBRSxVQUFBLEtBQUs7WUFDSixPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN4QyxDQUFDLENBQUMsQ0FBQztJQUVKLENBQUM7SUFDRiw4QkFBUSxHQUFSO1FBQ0EsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQUNDLDZCQUFPLEdBQVAsVUFBUSxFQUFTO1FBQ2YsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFVBQUEsRUFBRSxJQUFFLE9BQUEsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQVgsQ0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVELDhCQUFRLEdBQVIsVUFBUyxLQUFZLEVBQUMsUUFBZTtRQUNuQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBQSxFQUFFLElBQUUsT0FBQSxFQUFFLENBQUMsS0FBSyxJQUFJLEtBQUssRUFBakIsQ0FBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFTSw0QkFBTSxHQUFiO1FBQUEsaUJBYUM7UUFaQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLElBQUk7WUFDMUMsR0FBRyxDQUFBLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDbkIsb0NBQW9DO2dCQUNwQyxLQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztvQkFDZCxFQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDaEIsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ25CLFFBQVEsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUN2QixDQUFDLENBQUM7WUFDTixDQUFDO1FBQ0wsQ0FBQyxFQUFFLFVBQUEsS0FBSztZQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO0lBQ1IsQ0FBQztJQUNNLGdDQUFVLEdBQWpCLFVBQWtCLEVBQU87UUFBekIsaUJBT0M7UUFOQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxrREFBa0QsRUFBRSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsRUFBRTtZQUNsRyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNqQyxLQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7UUFDbEIsQ0FBQyxFQUFFLFVBQUEsS0FBSztZQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO0lBQ1QsQ0FBQztJQXJESDtRQUFDLGlCQUFVLEVBQUU7O21CQUFBO0lBdURiLGtCQUFDO0FBQUQsQ0FBQyxBQXRERCxJQXNEQztBQXREWSxtQkFBVyxjQXNEdkIsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuXG5pbXBvcnQgeyBVc2VyIH0gZnJvbSBcIi4vVXNlclwiO1xudmFyIFNxbGl0ZSA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtc3FsaXRlXCIpXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTZXJ2aWNlVXNlciB7XG5cbiAgIHVzZXJzOlVzZXJbXTtcbiAgIGRhdGFiYXNlOmFueTtcblxuICAgY29uc3RydWN0b3IoKXtcbiAgICAgKG5ldyBTcWxpdGUoXCJteS5kYlwiKSkudGhlbihkYiA9PiB7XG4gICAgICAgIGRiLmV4ZWNTUUwoXCJDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyB1c2VyIChpZCBJTlRFR0VSIFBSSU1BUlkgS0VZIEFVVE9JTkNSRU1FTlQsIGVtYWlsIFRFWFQsIHBhc3N3b3JkIFRFWFQpXCIpLnRoZW4oaWQgPT4ge1xuICAgICAgICAgIC8vICBwYWdlLmJpbmRpbmdDb250ZXh0ID0gY3JlYXRlVmlld01vZGVsKGRiKTtcbiAgICAgICAgICB0aGlzLmRhdGFiYXNlPWRiO1xuICAgICAgICAgIC8vdGhpcy5pbnNlcnRQcm9kdWN0cygpO1xuICAgICAgICAgIHRoaXMuZ2V0QWxsKCk7XG4gICAgICAgIH0sIGVycm9yID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ1JFQVRFIFRBQkxFIEVSUk9SXCIsIGVycm9yKTtcbiAgICAgICAgfSk7XG4gICAgfSwgZXJyb3IgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcIk9QRU4gREIgRVJST1JcIiwgZXJyb3IpO1xuICAgIH0pO1xuXG4gICB9XG4gIGdldFVzZXJzKCk6VXNlcltde1xuICByZXR1cm4gdGhpcy51c2Vycztcbn1cbiAgZ2V0VXNlcihpZDpudW1iZXIpOlVzZXJ7XG4gICAgcmV0dXJuIHRoaXMudXNlcnMuZmlsdGVyKHByPT5wci5pZCA9PSBpZClbMF07XG4gIH1cblxuICBGaW5kVXNlcihlbWFpbDpzdHJpbmcscGFzc3dvcmQ6c3RyaW5nKTpVc2Vye1xuICAgIHJldHVybiB0aGlzLnVzZXJzLmZpbHRlcihwcj0+cHIuZW1haWwgPT0gZW1haWwpWzBdO1xuICB9XG5cbiAgcHVibGljIGdldEFsbCgpe1xuICAgIHRoaXMuZGF0YWJhc2UuYWxsKFwiU0VMRUNUICogRlJPTSB1c2VyXCIpLnRoZW4ocm93cyA9PiB7XG4gICAgICAgICAgIGZvcih2YXIgcm93IGluIHJvd3MpIHtcbiAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJSRVNVTFRcIiwgcm93c1tyb3ddKTtcbiAgICAgICAgICAgICAgdGhpcy51c2Vycy5wdXNoKHtcbiAgICAgICAgICAgICAgICBpZDogcm93c1tyb3ddWzBdLFxuICAgICAgICAgICAgICAgIGVtYWlsOiByb3dzW3Jvd11bMV0sXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQ6IHJvd3Nbcm93XVsyXVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgfVxuICAgICAgIH0sIGVycm9yID0+IHtcbiAgICAgICAgICAgY29uc29sZS5sb2coXCJTRUxFQ1QgRVJST1JcIiwgZXJyb3IpO1xuICAgICAgIH0pO1xuICB9XG4gIHB1YmxpYyBpbnNlcnRVc2VyKHByOlVzZXIpe1xuICAgIHRoaXMuZGF0YWJhc2UuZXhlY1NRTChcIklOU0VSVCBJTlRPIHVzZXIgKGVtYWlsLCBwYXNzd29yZCkgVkFMVUVTICg/LCA/KVwiLCBbcHIuZW1haWwsIHByLnBhc3N3b3JkXSkudGhlbihpZCA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIklOU0VSVCBSRVNVTFRcIiwgaWQpO1xuICAgICAgICAgICAgdGhpcy5nZXRBbGwoKTtcbiAgICAgICAgfSwgZXJyb3IgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJJTlNFUlQgRVJST1JcIiwgZXJyb3IpO1xuICAgICAgICB9KTtcbiAgfVxuXG59XG4iXX0=