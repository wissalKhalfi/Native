"use strict";
var core_1 = require("@angular/core");
var Sqlite = require("nativescript-sqlite");
var TaskService = (function () {
    function TaskService() {
        var _this = this;
        (new Sqlite("my.db")).then(function (db) {
            db.execSQL("CREATE TABLE IF NOT EXISTS " +
                "task (id INTEGER PRIMARY KEY AUTOINCREMENT," +
                " titre TEXT, description TEXT)")
                .then(function (id) {
                _this.database = db;
                _this.getAll();
            }, function (error) {
                console.log("CREATE TABLE ERROR", error);
            });
        }, function (error) {
            console.log("OPEN DB ERROR", error);
        });
    }
    TaskService.prototype.getAll = function () {
        var _this = this;
        this.database.all("SELECT * FROM task").then(function (rows) {
            _this.tasks = [];
            for (var row in rows) {
                _this.tasks.push({
                    id: rows[row][0],
                    titre: rows[row][1],
                    description: rows[row][2]
                });
                console.log("id: " + rows[row][0] + "  titre: " + rows[row][1] + "  desc: " + rows[row][2]);
            }
        }, function (error) {
            console.log("SELECT ERROR", error);
        });
    };
    TaskService.prototype.insertTask = function (task) {
        var _this = this;
        this.database.execSQL("INSERT INTO task (titre, description) VALUES (?, ?)", [task.titre, task.description]).then(function (id) {
            console.log("INSERT RESULT", id);
            _this.getAll();
        }, function (error) {
            console.log("INSERT ERROR", error);
        });
    };
    TaskService.prototype.deleteAll = function () {
        var _this = this;
        this.database.execSQL("DELETE FROM task").then(function (id) {
            console.log("Delete RESULT", id);
            _this.getAll();
        }, function (error) {
            console.log("Delete ERROR", error);
        });
    };
    TaskService.prototype.deleteOneItem = function (id) {
        var _this = this;
        this.database.execSQL("DELETE FROM task WHERE id=?", [id]).then(function (id) {
            console.log("Delete RESULT", id);
            _this.getAll();
        }, function (error) {
            console.log("Delete ERROR", error);
        });
    };
    TaskService.prototype.getTasks = function () {
        this.getAll();
        return this.tasks;
    };
    TaskService.prototype.getTask = function (id) {
        return this.tasks.filter(function (tasks) { return tasks.id == id; })[0];
    };
    TaskService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], TaskService);
    return TaskService;
}());
exports.TaskService = TaskService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFza1NlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0YXNrU2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEscUJBQXlCLGVBQWUsQ0FBQyxDQUFBO0FBR3pDLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0FBRTVDO0lBSUE7UUFKQSxpQkFtRkM7UUE5RUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLEVBQUU7WUFDekIsRUFBRSxDQUFDLE9BQU8sQ0FBQyw2QkFBNkI7Z0JBQ3hDLDZDQUE2QztnQkFDN0MsZ0NBQWdDLENBQUM7aUJBQ2hDLElBQUksQ0FBQyxVQUFBLEVBQUU7Z0JBQ0osS0FBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7Z0JBRXBCLEtBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNqQixDQUFDLEVBQUUsVUFBQSxLQUFLO2dCQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDN0MsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLEVBQUUsVUFBQSxLQUFLO1lBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU0sNEJBQU0sR0FBYjtRQUFBLGlCQWNDO1FBYkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxJQUFJO1lBQzdDLEtBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDO1lBQ2hCLEdBQUcsQ0FBQSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ2xCLEtBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO29CQUNkLEVBQUUsRUFBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNmLEtBQUssRUFBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNwQixXQUFXLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDMUIsQ0FBQyxDQUFDO2dCQUNILE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRSxXQUFXLEdBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFDLFVBQVUsR0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUksQ0FBQztZQUM1RixDQUFDO1FBQ0wsQ0FBQyxFQUFFLFVBQUEsS0FBSztZQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGdDQUFVLEdBQVYsVUFBVyxJQUFTO1FBQXBCLGlCQU9DO1FBTkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMscURBQXFELEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLEVBQUU7WUFDaEgsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDbkMsS0FBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2hCLENBQUMsRUFBRSxVQUFBLEtBQUs7WUFDSixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCwrQkFBUyxHQUFUO1FBQUEsaUJBUUM7UUFQQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLEVBQUU7WUFDN0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDakMsS0FBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRWxCLENBQUMsRUFBRSxVQUFBLEtBQUs7WUFDSixPQUFPLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxtQ0FBYSxHQUFiLFVBQWMsRUFBUztRQUF2QixpQkFXQztRQVZBLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLDZCQUE2QixFQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxFQUFFO1lBQzVELE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ2pDLEtBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUVsQixDQUFDLEVBQUUsVUFBQSxLQUFLO1lBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7SUFJTCxDQUFDO0lBR0QsOEJBQVEsR0FBUjtRQUNDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNiLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFFRCw2QkFBTyxHQUFQLFVBQVEsRUFBUztRQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxVQUFBLEtBQUssSUFBRSxPQUFBLEtBQUssQ0FBQyxFQUFFLElBQUUsRUFBRSxFQUFaLENBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUE5RUQ7UUFBQyxpQkFBVSxFQUFFOzttQkFBQTtJQW9GYixrQkFBQztBQUFELENBQUMsQUFuRkQsSUFtRkM7QUFuRlksbUJBQVcsY0FtRnZCLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcblxyXG5pbXBvcnQge3Rhc2t9IGZyb20gXCIuL3Rhc2tcIlxyXG52YXIgU3FsaXRlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1zcWxpdGVcIik7XHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFRhc2tTZXJ2aWNle1xyXG5cclxudGFza3M6dGFza1tdO1xyXG5kYXRhYmFzZTphbnk7XHJcbmNvbnN0cnVjdG9yKCl7XHJcbiAgKG5ldyBTcWxpdGUoXCJteS5kYlwiKSkudGhlbihkYiA9PiB7XHJcbiAgICAgIGRiLmV4ZWNTUUwoXCJDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyBcIitcclxuICAgICAgXCJ0YXNrIChpZCBJTlRFR0VSIFBSSU1BUlkgS0VZIEFVVE9JTkNSRU1FTlQsXCIrXHJcbiAgICAgIFwiIHRpdHJlIFRFWFQsIGRlc2NyaXB0aW9uIFRFWFQpXCIpXHJcbiAgICAgIC50aGVuKGlkID0+IHtcclxuICAgICAgICAgIHRoaXMuZGF0YWJhc2UgPSBkYjtcclxuXHJcbiAgICAgICAgIHRoaXMuZ2V0QWxsKCk7XHJcbiAgICAgIH0sIGVycm9yID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ1JFQVRFIFRBQkxFIEVSUk9SXCIsIGVycm9yKTtcclxuICAgICAgfSk7XHJcbiAgfSwgZXJyb3IgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIk9QRU4gREIgRVJST1JcIiwgZXJyb3IpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5wdWJsaWMgZ2V0QWxsKCl7XHJcbiAgdGhpcy5kYXRhYmFzZS5hbGwoXCJTRUxFQ1QgKiBGUk9NIHRhc2tcIikudGhlbihyb3dzID0+IHtcclxuICAgICAgdGhpcy50YXNrcyA9IFtdO1xyXG4gICAgICBmb3IodmFyIHJvdyBpbiByb3dzKSB7XHJcbiAgICAgICAgICB0aGlzLnRhc2tzLnB1c2goe1xyXG4gICAgICAgICAgICBpZDpyb3dzW3Jvd11bMF0gLFxyXG4gICAgICAgICAgICB0aXRyZSA6IHJvd3Nbcm93XVsxXSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiByb3dzW3Jvd11bMl1cbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFwiaWQ6IFwiKyAgcm93c1tyb3ddWzBdICtcIiAgdGl0cmU6IFwiK3Jvd3Nbcm93XVsxXStcIiAgZGVzYzogXCIrcm93c1tyb3ddWzJdICAgKTtcclxuICAgICAgfVxyXG4gIH0sIGVycm9yID0+IHtcclxuICAgICAgY29uc29sZS5sb2coXCJTRUxFQ1QgRVJST1JcIiwgZXJyb3IpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5pbnNlcnRUYXNrKHRhc2s6dGFzayl7XHJcbiAgdGhpcy5kYXRhYmFzZS5leGVjU1FMKFwiSU5TRVJUIElOVE8gdGFzayAodGl0cmUsIGRlc2NyaXB0aW9uKSBWQUxVRVMgKD8sID8pXCIsIFt0YXNrLnRpdHJlLCB0YXNrLmRlc2NyaXB0aW9uXSkudGhlbihpZCA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiSU5TRVJUIFJFU1VMVFwiLCBpZCk7XHJcbiAgICB0aGlzLmdldEFsbCgpO1xyXG4gIH0sIGVycm9yID0+IHtcclxuICAgICAgY29uc29sZS5sb2coXCJJTlNFUlQgRVJST1JcIiwgZXJyb3IpO1xyXG4gIH0pO1xyXG59XHJcblxyXG5kZWxldGVBbGwoKXtcclxuICB0aGlzLmRhdGFiYXNlLmV4ZWNTUUwoXCJERUxFVEUgRlJPTSB0YXNrXCIpLnRoZW4oaWQgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkRlbGV0ZSBSRVNVTFRcIiwgaWQpO1xyXG4gICAgICB0aGlzLmdldEFsbCgpO1xyXG5cclxuICB9LCBlcnJvciA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKFwiRGVsZXRlIEVSUk9SXCIsIGVycm9yKTtcclxuICB9KTtcclxufVxyXG5cclxuZGVsZXRlT25lSXRlbShpZDpudW1iZXIpXHJcbnt0aGlzLmRhdGFiYXNlLmV4ZWNTUUwoXCJERUxFVEUgRlJPTSB0YXNrIFdIRVJFIGlkPT9cIixbaWRdKS50aGVuKGlkID0+IHtcclxuICAgICAgY29uc29sZS5sb2coXCJEZWxldGUgUkVTVUxUXCIsIGlkKTtcclxuICAgICAgdGhpcy5nZXRBbGwoKTtcclxuXHJcbiAgfSwgZXJyb3IgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhcIkRlbGV0ZSBFUlJPUlwiLCBlcnJvcik7XHJcbiAgfSk7XHJcblxyXG5cclxuXHJcbn1cclxuXHJcblxyXG5nZXRUYXNrcygpOnRhc2tbXXtcclxuXHR0aGlzLmdldEFsbCgpO1xyXG4gIHJldHVybiB0aGlzLnRhc2tzO1xyXG59XHJcblxyXG5nZXRUYXNrKGlkOm51bWJlcik6dGFza3tcclxuICByZXR1cm4gdGhpcy50YXNrcy5maWx0ZXIodGFza3M9PnRhc2tzLmlkPT1pZClbMF07XHJcbn1cclxuXHJcblxyXG5cclxuXHJcblxyXG59XHJcbiJdfQ==